#################################################
# Challenge part 2 - Initial Server Setup
# root
#################################################

- hosts: all
  remote_user: root
  vars_files:
    - vars/default.yml

# Install Packages
  tasks:
    - name: Install Prerequisites
      apt: name=aptitude update_cache=yes state=latest force_apt_get=yes

    - name: Update apt
      apt: update_cache=yes

    - name: Install required system packages
      apt: name={{ sys_packages }} state=latest

# User + Key Setup + sudo
    - name: Create a new regular user
      user:
        name: "{{ create_user }}"
        state: present
        create_home: true
        shell: /bin/bash

    - name: Set authorized key for remote user
      authorized_key:
        user: "{{ create_user }}"
        state: present
        key: "{{  copy_local_key }}"

    - name: Allow user {{ create_user }} to reload the nodes of the cluster
      shell: >-
        echo '{{ create_user }} ALL=NOPASSWD: /bin/systemctl reload
        {{ create_user }}.service, /bin/systemctl start
        {{ create_user }}.service' > /etc/sudoers.d/{{ create_user }}

# Generate systemd service
    - name: Generate systemd service for web server startup at boot
      shell: |
        /bin/cat <<EOF> /etc/systemd/system/{{ create_user }}.service
        [Unit]
        Description=NodeJS WebServer - Desafio parte 2
        DefaultDependencies=no
        After=network.target

        [Service]
        Type=forking
        EnvironmentFile=-/etc/default/{{ create_user }}
        WorkingDirectory=/home/{{ create_user }}
        ExecStart=/home/{{ create_user }}/.nvm/nvm-exec current/server.js -d
        ExecStop=/bin/sh -c "[ -n \"\$MAINPID\" ] && /bin/kill -TERM \$MAINPID"
        ExecReload=/bin/sh -c "[ -n \"\$MAINPID\" ] && /bin/kill -HUP \$MAINPID"
        Restart=always
        RemainAfterExit=true
        TimeoutStartSec=5min

        [Install]
        WantedBy=multi-user.target
        EOF
        /bin/systemctl daemon-reload
        /bin/systemctl enable {{ create_user }}.service

#
# NGINX setup
# Install default environment variables for some scripts
#
    - name: Install /etc/default/{{ creeate_user }}
      copy:
        src: webserver
        dest: /etc/default/{{ creeate_user }}
# Install snippet for nginx reverse proxy
    - name: Snippet for nginx reverse proxy
      copy:
        src: proxy.conf
        dest: /etc/nginx/snippets

# Install nginx virtual host setup
    - name: Nginx virtual host setup
      copy:
        src: webserver.com
        dest: /etc/nginx/sites-available/{{ domain }}

    - name: Replace place holder MYDOMAIN by {{ domain }}
      replace:
        path: /etc/nginx/sites-available/{{ domain }}
        regexp: 'MYDOMAIN'
        replace: '{{ domain }}'

    - name: Enable web site on nginx service
      shell: >-
        cd /etc/nginx/sites-enabled/;
        [ -L default ] && unlink default;
        /bin/ln -s ../sites-available/{{ domain }};
        /bin/systemctl reload nginx.service

# Install crontab for log parser
    - name: Enable crontab service to parse the log script
      shell: >-
        /bin/cat <<EOF | /usr/bin/crontab -
        MAILTO={{ email_crontab }}
        SHELL=/bin/bash
        PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

        # run at 00:00 every day
        0 0    * * * /home/{{ create_user }}/current/scripts/log_parser.py

        EOF

#################################################
# Challenge part 2 - app env setup on behalf of
# {{ create_user }}.
#################################################

- hosts: all
  vars_files:
    - vars/default.yml
  remote_user: "{{ create_user }}"

# Clone the project in the home of the user created above
  tasks:
    - name: Preparing environment of {{ create_user }}
# Setting up credentials for first deploy on localhost
      openssh_keypair:
        path: ~/.ssh/id_rsa
        size: 2048

    - name: Authorized local ssh for first deploy.
      shell: >-
        /bin/cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys;
        ssh-keyscan -H localhost > ~/.ssh/known_hosts

# Preparing nvm environment
    - name: Installing Node Version Manager (nvm)
      git:
        repo: https://github.com/nvm-sh/nvm.git
        dest: /home/{{ create_user }}/.nvm

    - name: Preparing node environment to lock for LTS
      copy:
        src: nvmrc
        dest: /home/{{ create_user }}/.nvmrc
        owner: "{{ create_user }}"
        group: "{{ create_user }}"
        mode: '0644'

    - name: Preparing node environment to be loaded at login
      copy:
        src: nvmenv
        dest: /home/{{ create_user }}/.nvmenv
        owner: "{{ create_user }}"
        group: "{{ create_user }}"
        mode: '0644'

    - name: Load lode environment at login for {{ create_user }}
      lineinfile:
        path: /home/{{ create_user }}/.bashrc
        line: . .nvmenv

#
# To use nvm install, the env must be loaded. However,
# .nvmenv needs some vars that are exported by .bashrc, when
# still .bashrc supposed to be loaded already; so, the
# effective nvm environment will be loaded from the second
# load of .nvmenv.
#
    - name: Install node version; it has been locked for lts/erbium
      shell: >-
        . /home/{{ create_user }}/.bashrc; \
        . /home/{{ create_user }}/.nvmenv; \
        nvm install

# Cloning repository of application
    - name: Clone git repository desafio-2
      git:
        repo: https://github.com/alessandro11/desafio-2.git
        dest: /home/{{ create_user }}/desafio-2
        version: "{{ release_version }}"

